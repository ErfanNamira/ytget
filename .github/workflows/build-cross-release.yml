# .github/workflows/build-and-release.yml

name: Build & Release YTGet

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release (e.g. v1.2.3)'
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  APP_NAME: YTGet
  VERSION: ${{ github.event.inputs.tag || github.ref_name }}

jobs:
  windows:
    name: ü™ü Windows Build
    runs-on: windows-latest
    env:
      APP_NAME: ${{ env.APP_NAME }}
      VERSION: ${{ env.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Download yt-dlp.exe & FFmpeg
        shell: pwsh
        run: |
          curl -sL https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe

          # download and unpack ffmpeg build, then drop archive
          curl -sL https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
          tar -xf ffmpeg.zip
          Remove-Item -Force ffmpeg.zip

          # copy ffmpeg & ffprobe into CWD for PyInstaller
          Copy-Item (Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1).FullName .
          Copy-Item (Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1).FullName .

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          pyinstaller --noconfirm --onedir --windowed `
            --name "$env:APP_NAME" `
            --icon "ytget_gui/icon.ico" `
            --clean --noupx `
            --version-file "version_info.txt" `
            --add-data "ytget_gui/icon.ico;." `
            --add-data "yt-dlp.exe;." `
            --add-data "ffmpeg.exe;." `
            --add-data "ffprobe.exe;." `
            "ytget_gui/main.py"

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/$APP_NAME/**

  linux:
    name: üêß Linux Build
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ env.APP_NAME }}
      VERSION: ${{ env.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies & linuxdeployqt
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-pip python3-setuptools \
                                  rpm ruby-full
          wget -qO linuxdeployqt.AppImage \
            https://github.com/linuxdeploy/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage
          chmod +x linuxdeployqt.AppImage
          sudo mv linuxdeployqt.AppImage /usr/local/bin/linuxdeployqt

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt pyinstaller

      - name: Download yt-dlp & FFmpeg
        run: |
          curl -sL https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
          chmod +x yt-dlp
          curl -sL https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz \
            | tar -xJ --strip-components=1 ffmpeg*/{ffmpeg,ffprobe}

      - name: Build AppDir with PyInstaller
        run: |
          pyinstaller --noconfirm --onedir --windowed \
            --name "$APP_NAME" \
            --icon "ytget_gui/icon.png" \
            --clean --noupx \
            --version-file "version_info.txt" \
            --add-data "ytget_gui/icon.png;." \
            --add-data "yt-dlp:." \
            --add-data "ffmpeg:." \
            --add-data "ffprobe:." \
            ytget_gui/main.py

      - name: Create AppImage
        run: |
          ARCH=$(uname -m)
          linuxdeployqt "dist/$APP_NAME/$APP_NAME.desktop" \
            -appimage \
            -bundle-non-qt-libs
          mv "${APP_NAME}-${ARCH}.AppImage" "${APP_NAME}-${VERSION}-linux-${ARCH}.AppImage"

      - name: Package DEB & RPM via fpm
        run: |
          sudo gem install --no-document fpm
          ARCH=amd64
          fpm -s dir -t deb \
            --name "$APP_NAME" \
            --version "$VERSION" \
            --package "${APP_NAME}-${VERSION}-linux-${ARCH}.deb" \
            --description "YTGet ‚Äî GUI YouTube downloader" \
            --license MIT \
            --url "https://github.com/ErfanNamira/ytget-gui" \
            --depends python3,python3-pyside6,python3-requests \
            --prefix /opt/$APP_NAME \
            dist/$APP_NAME/=/opt/$APP_NAME \
            yt-dlp=/opt/$APP_NAME \
            ffmpeg=/opt/$APP_NAME \
            ffprobe=/opt/$APP_NAME

          fpm -s dir -t rpm \
            --name "$APP_NAME" \
            --version "$VERSION" \
            --package "${APP_NAME}-${VERSION}-linux-${ARCH}.rpm" \
            --description "YTGet ‚Äî GUI YouTube downloader" \
            --license MIT \
            --url "https://github.com/ErfanNamira/ytget-gui" \
            --depends python3-pyside6,python3-requests \
            --prefix /opt/$APP_NAME \
            dist/$APP_NAME/=/opt/$APP_NAME \
            yt-dlp=/opt/$APP_NAME \
            ffmpeg=/opt/$APP_NAME \
            ffprobe=/opt/$APP_NAME

      - name: Upload Linux build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            *.AppImage
            *.deb
            *.rpm

  macos:
    name: üçé macOS Build
    runs-on: macos-latest
    env:
      APP_NAME: ${{ env.APP_NAME }}
      VERSION: ${{ env.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt pyinstaller

      - name: Download yt-dlp & link FFmpeg
        run: |
          curl -sL https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
          chmod +x yt-dlp
          brew install ffmpeg
          ln -sf "$(which ffmpeg)" ffmpeg
          ln -sf "$(which ffprobe)" ffprobe

      - name: Build .app with PyInstaller
        run: |
          pyinstaller --noconfirm --onedir --windowed \
            --name "$APP_NAME" \
            --clean --noupx \
            --version-file "version_info.txt" \
            ytget_gui/main.py

      - name: Create DMG
        run: |
          mkdir -p dist/dmg
          hdiutil create \
            -format UDZO \
            -srcfolder "dist/${APP_NAME}.app" \
            -volname "${APP_NAME}" \
            "dist/dmg/${APP_NAME}-${VERSION}-macos.dmg"

      - name: Archive .app bundle
        run: |
          tar -cJf "${APP_NAME}-${VERSION}-macos.tar.xz" -C dist "${APP_NAME}.app"

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            dist/dmg/${APP_NAME}-${VERSION}-macos.dmg
            ${APP_NAME}-${VERSION}-macos.tar.xz

  release:
    name: üöÄ Publish Release
    needs: [windows, linux, macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets

      - name: Ensure tag exists
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --tags
          TAG="${{ github.event.inputs.tag }}"
          git rev-parse -q --verify "refs/tags/$TAG" || (
            git tag "$TAG" && git push origin "$TAG"
          )

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: "YTGet ${{ github.event.inputs.tag || github.ref_name }}"
          body_path: RELEASE_NOTES.md
          files: |
            release_assets/*.zip
            release_assets/*.AppImage
            release_assets/*.deb
            release_assets/*.rpm
            release_assets/*.dmg
            release_assets/*.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
