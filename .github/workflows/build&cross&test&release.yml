name: Build, Test & Release YTGet (Cross-Platform)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release'
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.runs_on }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - name: Windows
            runs_on: windows-latest
          - name: Linux
            runs_on: ubuntu-latest
          - name: macOS
            runs_on: macos-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install Qt XCB dependencies (Linux)
        if: ${{ matrix.name == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-cursor0 libxcb-xinerama0 libxcb-xinput0 \
            libxcb-xfixes0 libxcb-shape0 libxcb-render-util0 \
            libxcb-icccm4 libxcb-image0 libxcb-keysyms1 \
            libxcb-randr0 libxcb-render0 libxcb-shm0 \
            libxcb-sync1 libxcb-util1 libxcb-xkb1

      - name: Install Qt (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          brew update
          brew install qt

      - name: Download yt-dlp
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
            chmod +x yt-dlp
          else
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos -o yt-dlp
            chmod +x yt-dlp
          fi
        shell: bash

      - name: Download ffmpeg & ffprobe
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
            powershell -Command "Expand-Archive -Path ffmpeg.zip -DestinationPath ."
            cp "$(powershell -Command "(Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1).FullName")" .
            cp "$(powershell -Command "(Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1).FullName")" .
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            cp "$(which ffmpeg)" .
            cp "$(which ffprobe)" .
          else
            brew install ffmpeg
            cp "$(which ffmpeg)" .
            cp "$(which ffprobe)" .
          fi
        shell: bash

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --onedir --windowed \
            --icon "ytget_gui/icon.ico" \
            --name "YTGet" \
            --clean --noupx \
            --version-file "version_info.txt" \
            --hidden-import "PySide6.QtCore" \
            --hidden-import "PySide6.QtGui" \
            --hidden-import "PySide6.QtWidgets" \
            --hidden-import "requests" \
            --hidden-import "mutagen" \
            --hidden-import "PIL" \
            --hidden-import "webbrowser" \
            --hidden-import "mutagen.id3" \
            --hidden-import "mutagen.flac" \
            --add-data "ytget_gui:ytget_gui" \
			--add-data "ytget_gui/icon.ico:." \
            --add-data "LICENSE:." \
            --add-data "README.md:." \
            --add-data "RELEASE_NOTES.md:." \
            --add-data "yt-dlp${{ runner.os == 'Windows' && '.exe' || '' }}:." \
            --add-data "ffmpeg${{ runner.os == 'Windows' && '.exe' || '' }}:." \
            --add-data "ffprobe${{ runner.os == 'Windows' && '.exe' || '' }}:." \
            "ytget_gui/main.py"
        shell: bash

      - name: Bundle Qt XCB libraries (Linux)
        if: ${{ matrix.name == 'Linux' }}
        run: |
          DIST=dist/YTGet
          sudo apt-get update
          sudo apt-get install -y libxcb-cursor0    # ensure they exist
          find /usr/lib/x86_64-linux-gnu -maxdepth 1 -type f -name 'libxcb*.so*' \
            -exec cp {} "${DIST}/" \;
        shell: bash

      - name: Bundle macOS app with macdeployqt
        if: ${{ matrix.name == 'macOS' }}
        run: |
          brew install qt@6
          DIST=dist/YTGet/YTGet.app
          macdeployqt "$DIST" -verbose=1
        shell: bash

      - name: Package build
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell Compress-Archive -Path dist/YTGet -DestinationPath YTGet-${{ matrix.name }}.zip -CompressionLevel Optimal
          else
            tar -czf YTGet-${{ matrix.name }}.tar.gz -C dist YTGet
          fi
        shell: bash

      - name: Generate SHA-256 checksum
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            certutil -hashfile YTGet-${{ matrix.name }}.zip SHA256 > YTGet-${{ matrix.name }}.sha256
          else
            shasum -a 256 YTGet-${{ matrix.name }}.* > YTGet-${{ matrix.name }}.sha256
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.name }}
          path: |
            YTGet-${{ matrix.name }}.*
            YTGet-${{ matrix.name }}.sha256

  smoke_test:
    name: Smoke Test
    needs: build
    strategy:
      matrix:
        include:
          - name: Linux
            runs_on: ubuntu-latest
            archive: YTGet-Linux.tar.gz
          - name: macOS
            runs_on: macos-latest
            archive: YTGet-macOS.tar.gz
    runs-on: ${{ matrix.runs_on }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.name }}
          path: ./artifact

      - name: Extract artifact
        run: |
          tar -xzf artifact/${{ matrix.archive }} -C testdir
        shell: bash

      - name: Run version smoke test
        run: |
          cd testdir/YTGet
          ./YTGet --version | grep "${{ github.event.inputs.tag || github.ref_name }}"
        shell: bash

  release:
    name: Create GitHub Release
    needs: [build, smoke_test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: "YTGet ${{ github.event.inputs.tag || github.ref_name }}"
          body_path: RELEASE_NOTES.md
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
