name: Build & Release YTGet

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release'
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up latest Python 3
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # Platform-specific downloads
    - name: Download yt-dlp binary
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_linux -o yt-dlp
          chmod +x yt-dlp
        else
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos -o yt-dlp
          chmod +x yt-dlp
        fi

    - name: Download ffmpeg & ffprobe (platform specific)
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
          tar -xf ffmpeg.zip
          cp $(find . -name ffmpeg.exe | head -n1) .
          cp $(find . -name ffprobe.exe | head -n1) .
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          cp /usr/bin/ffmpeg .
          cp /usr/bin/ffprobe .
        else
          brew install ffmpeg
          cp $(which ffmpeg) .
          cp $(which ffprobe) .
        fi

    - name: Build with PyInstaller
      run: |
        pyinstaller --noconfirm --onedir --windowed \
          --name "YTGet" \
          --icon "ytget/icon.ico" \
          --clean --noupx \
          --version-file "version_info.txt" \
          --hidden-import "PySide6.QtCore" \
          --hidden-import "PySide6.QtGui" \
          --hidden-import "PySide6.QtWidgets" \
          --hidden-import "requests" \
          --hidden-import "mutagen" \
          --hidden-import "PIL" \
          --hidden-import "webbrowser" \
          --hidden-import "mutagen.id3" \
          --hidden-import "mutagen.flac" \
          --add-data "ytget/__init__.py;ytget" \
          --add-data "ytget/__main__.py;ytget" \
          --add-data "ytget/main_window.py;ytget" \
          --add-data "ytget/settings.py;ytget" \
          --add-data "ytget/styles.py;ytget" \
          --add-data "ytget/icon.ico;ytget" \
          --add-data "ytget/dialogs;ytget/dialogs" \
          --add-data "ytget/utils;ytget/utils" \
          --add-data "ytget/widgets;ytget/widgets" \
          --add-data "ytget/workers;ytget/workers" \
          --add-data "LICENSE;." \
          --add-data "README.md;." \
          --add-data "RELEASE_NOTES.md;." \
          --add-data "yt-dlp*;." \
          --add-data "ffmpeg*;." \
          --add-data "ffprobe*;." \
          "ytget/main.py"

    - name: Package artifacts
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          powershell Compress-Archive -Path dist/YTGet -DestinationPath YTGet-${{ runner.os }}.zip
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          tar -czf YTGet-${{ runner.os }}.tar.gz -C dist YTGet
        else
          tar -czf YTGet-${{ runner.os }}.tar.gz -C dist YTGet
        fi

    - name: Generate SHA-256 checksum
      run: |
        FILE=$(ls YTGet-*)
        shasum -a 256 $FILE > $FILE.sha256

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        name: "YTGet ${{ github.event.inputs.tag || github.ref_name }}"
        body_path: RELEASE_NOTES.md
        files: |
          YTGet-* 
          YTGet-*.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
