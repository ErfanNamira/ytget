name: Build & Release YTGet (Cross-Platform)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release'
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    continue-on-error: true   # Don't cancel other OS builds if one fails
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up latest Python 3
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Download yt-dlp
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
          chmod +x yt-dlp
        else
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos -o yt-dlp
          chmod +x yt-dlp
        fi
      shell: bash

    - name: Download ffmpeg & ffprobe
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
          powershell -Command "Expand-Archive -Path ffmpeg.zip -DestinationPath ."
          cp "$(powershell -Command "(Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1).FullName")" .
          cp "$(powershell -Command "(Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1).FullName")" .
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          cp $(which ffmpeg) .
          cp $(which ffprobe) .
        else
          brew install ffmpeg
          cp $(which ffmpeg) .
          cp $(which ffprobe) .
        fi
      shell: bash

    - name: Build with PyInstaller
      run: |
        pyinstaller --noconfirm --onedir --windowed \
          --icon "ytget_gui/icon.ico" \
          --name "YTGet" \
          --clean --noupx \
          --version-file "version_info.txt" \
          --hidden-import "PySide6.QtCore" \
          --hidden-import "PySide6.QtGui" \
          --hidden-import "PySide6.QtWidgets" \
          --hidden-import "requests" \
          --hidden-import "mutagen" \
          --hidden-import "PIL" \
          --hidden-import "webbrowser" \
          --hidden-import "mutagen.id3" \
          --hidden-import "mutagen.flac" \
          --add-data "ytget_gui/__init__.py:ytget_gui" \
          --add-data "ytget_gui/__main__.py:ytget_gui" \
          --add-data "ytget_gui/main_window.py:ytget_gui" \
          --add-data "ytget_gui/settings.py:ytget_gui" \
          --add-data "ytget_gui/styles.py:ytget_gui" \
          --add-data "ytget_gui/icon.ico:ytget_gui" \
          --add-data "ytget_gui/icon.ico:." \
          --add-data "ytget_gui/dialogs:ytget_gui/dialogs" \
          --add-data "ytget_gui/utils:ytget_gui/utils" \
          --add-data "ytget_gui/widgets:ytget_gui/widgets" \
          --add-data "ytget_gui/workers:ytget_gui/workers" \
          --add-data "LICENSE:." \
          --add-data "README.md:." \
          --add-data "RELEASE_NOTES.md:." \
          --add-data "yt-dlp${{ runner.os == 'Windows' && '.exe' || '' }}:." \
          --add-data "ffmpeg${{ runner.os == 'Windows' && '.exe' || '' }}:." \
          --add-data "ffprobe${{ runner.os == 'Windows' && '.exe' || '' }}:." \
          "ytget_gui/main.py"
      shell: bash

    - name: Package build
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          powershell Compress-Archive -Path dist/YTGet -DestinationPath YTGet-${{ runner.os }}.zip -CompressionLevel Optimal
        else
          tar -czf YTGet-${{ runner.os }}.tar.gz -C dist YTGet
        fi
      shell: bash

    - name: Generate SHA-256 checksum
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          certutil -hashfile YTGet-${{ runner.os }}.zip SHA256 > YTGet-${{ runner.os }}.sha256
        else
          shasum -a 256 YTGet-${{ runner.os }}.* > YTGet-${{ runner.os }}.sha256
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ runner.os }}
        path: |
          YTGet-${{ runner.os }}.*
          YTGet-${{ runner.os }}.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        name: "YTGet ${{ github.event.inputs.tag || github.ref_name }}"
        body_path: RELEASE_NOTES.md
        files: artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
