name: Build & Release YTGet

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release'
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up latest Python 3
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Download latest yt-dlp.exe
      shell: pwsh
      run: |
        curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe

    - name: Download ffmpeg & ffprobe
      shell: pwsh
      run: |
        curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
        tar -xf ffmpeg.zip
        $ffmpegPath = Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1
        $ffprobePath = Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1
        Copy-Item $ffmpegPath.FullName .
        Copy-Item $ffprobePath.FullName .

    - name: Build with PyInstaller
      shell: pwsh
      run: |
        pyinstaller --noconfirm --onedir --windowed `
          --icon "ytget/icon.ico" `
          --name "YTGet" `
          --clean --noupx `
          --version-file "version_info.txt" `
          --hidden-import "PySide6.QtCore" `
          --hidden-import "PySide6.QtGui" `
          --hidden-import "PySide6.QtWidgets" `
          --hidden-import "requests" `
          --hidden-import "mutagen" `
          --hidden-import "PIL" `
          --hidden-import "webbrowser" `
          --hidden-import "mutagen.id3" `
          --hidden-import "mutagen.flac" `
          --add-data "ytget/__init__.py;ytget" `
          --add-data "ytget/__main__.py;ytget" `
          --add-data "ytget/main_window.py;ytget" `
          --add-data "ytget/settings.py;ytget" `
          --add-data "ytget/styles.py;ytget" `
          --add-data "ytget/icon.ico;ytget" `
          --add-data "ytget/dialogs;ytget/dialogs" `
          --add-data "ytget/utils;ytget/utils" `
          --add-data "ytget/widgets;ytget/widgets" `
          --add-data "ytget/workers;ytget/workers" `
          --add-data "LICENSE;." `
          --add-data "README.md;." `
          --add-data "RELEASE_NOTES.md;." `
          --add-data "yt-dlp.exe;." `
          --add-data "ffmpeg.exe;." `
          --add-data "ffprobe.exe;." `
          "ytget/main.py"

    - name: Zip build
      shell: pwsh
      run: Compress-Archive -Path dist/YTGet -DestinationPath YTGet.zip -CompressionLevel Optimal

    - name: Generate SHA-256 checksum
      shell: pwsh
      run: |
        $h = Get-FileHash -Algorithm SHA256 YTGet.zip
        "$($h.Hash)  YTGet.zip" | Out-File -Encoding ASCII -NoNewline YTGet.zip.sha256

    - name: Ensure tag exists (manual runs)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      shell: pwsh
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git fetch --tags
        $tag = "${{ github.event.inputs.tag }}"
        git rev-parse -q --verify "refs/tags/$tag" 2>$null
        if ($LASTEXITCODE -ne 0) {
          git tag "$tag"
          git push origin "$tag"
          Write-Host "Created and pushed tag $tag."
        } else {
          Write-Host "Tag $tag already exists."
        }

    - name: Create GitHub Release (by github-actions)
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        name: "YTGet ${{ github.event.inputs.tag || github.ref_name }}"
        body_path: RELEASE_NOTES.md
        files: |
          YTGet.zip
          YTGet.zip.sha256
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}