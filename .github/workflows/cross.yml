name: Cross YTGet

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: YTGet

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller

    - name: Fetch yt-dlp binary (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe

    - name: Fetch yt-dlp binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
        chmod +x yt-dlp

    - name: Install ffmpeg & ffprobe (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
        tar -xf ffmpeg.zip
        $f = Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1
        $p = Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1
        Copy-Item $f.FullName .
        Copy-Item $p.FullName .

    - name: Install ffmpeg & ffprobe (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        cp /usr/bin/ffmpeg .
        cp /usr/bin/ffprobe .

    - name: Install ffmpeg & ffprobe (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install ffmpeg
        cp /usr/local/bin/ffmpeg .
        cp /usr/local/bin/ffprobe .

    - name: Build with PyInstaller
      shell: bash
      run: |
        pyinstaller --noconfirm --onedir --windowed \
          --icon "icon.ico" \
          --name "${{ env.APP_NAME }}" \
          --clean --noupx \
          --version-file "version_info.txt" \
          --hidden-import "PySide6.QtCore" \
          --hidden-import "PySide6.QtGui" \
          --hidden-import "PySide6.QtWidgets" \
          --hidden-import "requests" \
          --hidden-import "mutagen" \
          --hidden-import "PIL" \
          --hidden-import "webbrowser" \
          --hidden-import "mutagen.id3" \
          --hidden-import "mutagen.flac" \
          $(
            if [ "${{ runner.os }}" = "Windows" ]; then
              cat <<'EOF'
              --add-data "__init__.py;."
              --add-data "__main__.py;."
              --add-data "ffmpeg.exe;."
              --add-data "ffprobe.exe;."
              EOF
            else
              cat <<'EOF'
              --add-data "__init__.py:."
              --add-data "__main__.py:."
              --add-data "ffmpeg:."
              --add-data "ffprobe:."
              EOF
            fi
          ) \
          --add-data "icon.ico;." \
          --add-data "LICENSE;." \
          --add-data "main_window.py;." \
          --add-data "README.md;." \
          --add-data "RELEASE_NOTES.md;." \
          --add-data "settings.py;." \
          --add-data "styles.py;." \
          --add-data "yt-dlp${{ runner.os == 'Windows' && '.exe' || '' }};." \
          --add-data "dialogs;dialogs/" \
          --add-data "utils;utils/" \
          --add-data "widgets;widgets/" \
          --add-data "workers;workers/" \
          "main.py"

    - name: Package build into ZIP
      shell: bash
      run: |
        ZIP_NAME="${{ env.APP_NAME }}-${{ matrix.os }}.zip"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          pwsh -c "Compress-Archive -Path dist/${{ env.APP_NAME }} -DestinationPath $ZIP_NAME -CompressionLevel Optimal"
        else
          zip -r "$ZIP_NAME" "dist/${{ env.APP_NAME }}"
        fi

    - name: Compute SHA-256 checksum
      shell: bash
      run: |
        ZIP_NAME="${{ env.APP_NAME }}-${{ matrix.os }}.zip"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          pwsh -c "\$h = Get-FileHash -Algorithm SHA256 $ZIP_NAME; \"\$($h.Hash)  $ZIP_NAME\" | Out-File -Encoding ASCII -NoNewline $ZIP_NAME.sha256"
        else
          sha256sum "$ZIP_NAME" > "$ZIP_NAME.sha256"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os }}
        path: |
          ${{ env.APP_NAME }}-${{ matrix.os }}.zip
          ${{ env.APP_NAME }}-${{ matrix.os }}.zip.sha256
