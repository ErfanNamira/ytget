name: Cross YTGet

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            yt_dlp_url: https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe
            ffmpeg_url: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip
            archive_ext: zip
            sep: ';'
          - os: ubuntu-latest
            yt_dlp_url: https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
            ffmpeg_pkg: ffmpeg
            archive_ext: tar.gz
            sep: ':'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up latest Python 3
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller

    - name: Download yt-dlp
      run: |
        curl -L "${{ matrix.yt_dlp_url }}" -o yt-dlp${{ runner.os == 'Windows' && '.exe' || '' }}
        chmod +x yt-dlp || true

    - name: Download ffmpeg & ffprobe (Windows)
      if: runner.os == 'Windows'
      run: |
        curl -L "${{ matrix.ffmpeg_url }}" -o ffmpeg.zip
        tar -xf ffmpeg.zip
        cp $(find . -name ffmpeg.exe | head -n 1) .
        cp $(find . -name ffprobe.exe | head -n 1) .

    - name: Install ffmpeg (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.ffmpeg_pkg }}
        cp $(which ffmpeg) .
        cp $(which ffprobe) .

    - name: Build with PyInstaller
      run: |
        ICON_OPT=""
        [ -f "icon.ico" ] && ICON_OPT="--icon icon.ico"
        pyinstaller --noconfirm --onedir --windowed \
          $ICON_OPT \
          --name "YTGet" \
          --clean --noupx \
          --version-file "version_info.txt" \
          --hidden-import "PySide6.QtCore" \
          --hidden-import "PySide6.QtGui" \
          --hidden-import "PySide6.QtWidgets" \
          --hidden-import "requests" \
          --hidden-import "mutagen" \
          --hidden-import "PIL" \
          --hidden-import "webbrowser" \
          --hidden-import "mutagen.id3" \
          --hidden-import "mutagen.flac" \
          --add-data "__init__.py${{ matrix.sep }}." \
          --add-data "__main__.py${{ matrix.sep }}." \
          --add-data "ffmpeg*${{ matrix.sep }}." \
          --add-data "ffprobe*${{ matrix.sep }}." \
          --add-data "icon.ico${{ matrix.sep }}." \
          --add-data "LICENSE${{ matrix.sep }}." \
          --add-data "main_window.py${{ matrix.sep }}." \
          --add-data "README.md${{ matrix.sep }}." \
          --add-data "RELEASE_NOTES.md${{ matrix.sep }}." \
          --add-data "settings.py${{ matrix.sep }}." \
          --add-data "styles.py${{ matrix.sep }}." \
          --add-data "yt-dlp*${{ matrix.sep }}." \
          --add-data "dialogs${{ matrix.sep }}dialogs/" \
          --add-data "utils${{ matrix.sep }}utils/" \
          --add-data "widgets${{ matrix.sep }}widgets/" \
          --add-data "workers${{ matrix.sep }}workers/" \
          main.py

    - name: Package build (Windows)
      if: runner.os == 'Windows'
      run: Compress-Archive -Path dist/YTGet -DestinationPath YTGet-${{ matrix.os }}.zip -CompressionLevel Optimal

    - name: Package build (Linux)
      if: runner.os == 'Linux'
      run: tar -czf YTGet-${{ matrix.os }}.tar.gz -C dist YTGet

    - name: Generate SHA-256 checksum
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          $h = Get-FileHash -Algorithm SHA256 YTGet-${{ matrix.os }}.zip
          "$($h.Hash)  YTGet-${{ matrix.os }}.zip" | Out-File -Encoding ASCII -NoNewline YTGet-${{ matrix.os }}.zip.sha256
        else
          sha256sum YTGet-${{ matrix.os }}.tar.gz > YTGet-${{ matrix.os }}.tar.gz.sha256
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YTGet-${{ matrix.os }}-build
        path: |
          YTGet-${{ matrix.os }}.${{ matrix.archive_ext }}
          YTGet-${{ matrix.os }}.${{ matrix.archive_ext }}.sha256
