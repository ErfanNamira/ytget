name: Cross YTGet

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    env:
      APP_NAME: YTGet

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pyinstaller

    # yt-dlp
    - name: Fetch yt-dlp (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o yt-dlp.exe

    - name: Fetch yt-dlp (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
        chmod +x yt-dlp

    # FFmpeg
    - name: Install FFmpeg & FFprobe (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip -o ffmpeg.zip
        tar -xf ffmpeg.zip
        $f = Get-ChildItem -Recurse -Filter ffmpeg.exe | Select-Object -First 1
        $p = Get-ChildItem -Recurse -Filter ffprobe.exe | Select-Object -First 1
        Copy-Item $f.FullName .
        Copy-Item $p.FullName .

    - name: Install FFmpeg & FFprobe (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        cp /usr/bin/ffmpeg .
        cp /usr/bin/ffprobe .

    - name: Install FFmpeg & FFprobe (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install ffmpeg
        if [[ -x "/opt/homebrew/bin/ffmpeg" ]]; then
          cp /opt/homebrew/bin/ffmpeg .
          cp /opt/homebrew/bin/ffprobe .
        else
          cp /usr/local/bin/ffmpeg .
          cp /usr/local/bin/ffprobe .
        fi

    # Clean old builds
    - name: Clean previous build artifacts
      run: rm -rf build dist *.spec

    # Build
    - name: Build with PyInstaller
      shell: bash
      run: |
        ARCH=$(uname -m)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          YTDLP_FILE="yt-dlp.exe"
          SEP=";"
        else
          YTDLP_FILE="yt-dlp"
          SEP=":"
        fi

        args=(
          --noconfirm
          --onedir
          --windowed
          --icon=icon.ico
          --name="$APP_NAME"
          --clean
          --noupx
          --version-file=version_info.txt
          --hidden-import=PySide6.QtCore
          --hidden-import=PySide6.QtGui
          --hidden-import=PySide6.QtWidgets
          --hidden-import=requests
          --hidden-import=mutagen
          --hidden-import=PIL
          --hidden-import=webbrowser
          --hidden-import=mutagen.id3
          --hidden-import=mutagen.flac
        )

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          args+=(
            --add-data="__init__.py;."
            --add-data="__main__.py;."
            --add-data="ffmpeg.exe;."
            --add-data="ffprobe.exe;."
          )
        else
          args+=(
            --add-data="__init__.py:."
            --add-data="__main__.py:."
            --add-data="ffmpeg:."
            --add-data="ffprobe:."
          )
        fi

        args+=(
          --add-data="icon.ico${SEP}."
          --add-data="LICENSE${SEP}."
          --add-data="main_window.py${SEP}."
          --add-data="README.md${SEP}."
          --add-data="RELEASE_NOTES.md${SEP}."
          --add-data="settings.py${SEP}."
          --add-data="styles.py${SEP}."
          --add-data="${YTDLP_FILE}${SEP}."
          --add-data="dialogs${SEP}dialogs/"
          --add-data="utils${SEP}utils/"
          --add-data="widgets${SEP}widgets/"
          --add-data="workers${SEP}workers/"
          main.py
        )

        pyinstaller "${args[@]}"
        echo "ARCH=$ARCH" >> $GITHUB_ENV

    # Create release archives
    - name: Package build
      shell: bash
      run: |
        ARCH_TAG="${ARCH:-$(uname -m)}"
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          FILE_NAME="${APP_NAME}-linux-${ARCH_TAG}.tar.gz"
          tar -czvf "$FILE_NAME" -C dist "${APP_NAME}"
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          FILE_NAME="${APP_NAME}-windows-${ARCH_TAG}.zip"
          pwsh -c "Compress-Archive -Path dist/${APP_NAME}/* -DestinationPath $FILE_NAME -CompressionLevel Optimal"
        else
          FILE_NAME="${APP_NAME}-macos-${ARCH_TAG}.tar.gz"
          tar -czvf "$FILE_NAME" -C dist "${APP_NAME}"
        fi
        echo "PACKAGE_FILE=$FILE_NAME" >> $GITHUB_ENV

    # Checksum
    - name: Compute SHA-256 checksum
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          pwsh -c "\$h = Get-FileHash -Algorithm SHA256 $PACKAGE_FILE; \"\$($h.Hash)  $PACKAGE_FILE\" | Out-File -Encoding ASCII -NoNewline $PACKAGE_FILE.sha256"
        else
          sha256sum "$PACKAGE_FILE" > "$PACKAGE_FILE.sha256"
        fi

    # Upload uncompressed folder for CI (avoids double zip)
    - name: Upload build folder artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os }}-${{ env.ARCH }}-folder
        path: dist/${{ env.APP_NAME }}

    # Upload release-ready archives
    - name: Upload packaged archive
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os }}-${{ env.ARCH }}-archive
        path: |
          ${{ env.PACKAGE_FILE }}
          ${{ env.PACKAGE_FILE }}.sha256
